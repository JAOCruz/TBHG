export declare const MAGIC: number[];
export declare const WASM_VERSION: number[];
export declare const EPSILON = 0.00001;
export declare const SECTION: {
    TYPE: number;
    IMPORT: number;
    FUNC: number;
    MEMORY: number;
    GLOBAL: number;
    EXPORT: number;
    CODE: number;
};
export declare const EXPORT_TYPE: {
    readonly FUNC: 0;
    readonly TABLE: 1;
    readonly MEMORY: 2;
    readonly GLOBAL: 3;
};
type Align = 1 | 2 | 3;
export declare const op: {
    block: (blockType: BlockType) => number[];
    loop: (blockType: BlockType) => number[];
    if: (retType: BlockType) => number[];
    else: number;
    end: number;
    br_if: (i: number) => number[];
    call: (i: number) => number[];
    drop: number;
    select: number;
    local_get: (i: number) => number[];
    local_set: (i: number) => number[];
    local_tee: (i: number) => number[];
    global_get: (i: number) => number[];
    global_set: (i: number) => number[];
    f64_load: (align: Align, offset: number) => number[];
    f64_store: (align: Align, offset: number) => number[];
    i32_const: (i: number) => number[];
    f64_const: (i: number) => number[];
    i32_eqz: number;
    i32_ne: number;
    i32_lt_s: number;
    i32_lt_u: number;
    i32_gt_s: number;
    i32_le_s: number;
    i32_le_u: number;
    i32_ge_s: number;
    f64_eq: number;
    f64_ne: number;
    f64_lt: number;
    f64_gt: number;
    f64_le: number;
    f64_ge: number;
    i32_add: number;
    i32_sub: number;
    i32_mul: number;
    i32_rem_s: number;
    i32_and: number;
    i32_or: number;
    i64_rem_s: number;
    i64_and: number;
    i64_or: number;
    f64_abs: number;
    f64_neg: number;
    f64_ceil: number;
    f64_floor: number;
    f64_sqrt: number;
    f64_add: number;
    f64_sub: number;
    f64_mul: number;
    f64_div: number;
    f64_min: number;
    f64_max: number;
    i32_trunc_f64_s: number;
    i32_trunc_f64_u: number;
    i64_trunc_s_f64: number;
    f64_convert_i64_s: number;
    f64_convert_i32_s: number;
};
export declare const VAL_TYPE: {
    readonly i32: 127;
    readonly i64: 126;
    readonly f32: 125;
    readonly f64: 124;
};
export declare const MUTABILITY: {
    const: number;
    var: number;
};
export declare const BLOCK: {
    readonly void: 64;
    readonly i32: 127;
    readonly i64: 126;
    readonly f32: 125;
    readonly f64: 124;
};
type BlockKeys = keyof typeof BLOCK;
export type BlockType = typeof BLOCK[BlockKeys];
export declare const FUNCTION_TYPE = 96;
export declare const MEMORY_IDX = 2;
export declare const GLOBAL_TYPE = 3;
export declare const TYPE_IDX = 0;
export declare const IS_ZEROISH: number[];
export declare const IS_NOT_ZEROISH: number[];
export declare function encodef64(num: number): Uint8Array;
export declare const encodeString: (str: string) => number[];
export declare function unsignedLEB128(n: number): number[];
export declare function signedLEB128(value: number): number[];
export declare const encodeFlatVector: (data: number[]) => number[];
export declare const encodeNestedVector: (data: number[][]) => number[];
export declare function encodeSection(type: number, subSections: number[][]): number[];
export {};
