// node_modules/phaser3-rex-plugins/plugins/utils/system/IsGame.js
var GameClass = Phaser.Game;
var IsGame = function(object) {
  return object instanceof GameClass;
};
var IsGame_default = IsGame;

// node_modules/phaser3-rex-plugins/plugins/utils/system/IsSceneObject.js
var SceneClass = Phaser.Scene;
var IsSceneObject = function(object) {
  return object instanceof SceneClass;
};
var IsSceneObject_default = IsSceneObject;

// node_modules/phaser3-rex-plugins/plugins/utils/system/GetGame.js
var GetGame = function(object) {
  if (object == null || typeof object !== "object") {
    return null;
  } else if (IsGame_default(object)) {
    return object;
  } else if (IsGame_default(object.game)) {
    return object.game;
  } else if (IsSceneObject_default(object)) {
    return object.sys.game;
  } else if (IsSceneObject_default(object.scene)) {
    return object.scene.sys.game;
  }
};
var GetGame_default = GetGame;

// node_modules/phaser3-rex-plugins/plugins/utils/renderer/postfxpipeline/RegisterPostPipeline.js
var RegisterPostPipeline = function(game, postFxPipelineName, PostFxPipelineClass) {
  GetGame_default(game).renderer.pipelines.addPostPipeline(postFxPipelineName, PostFxPipelineClass);
};
var RegisterPostPipeline_default = RegisterPostPipeline;

// node_modules/phaser3-rex-plugins/plugins/utils/renderer/postfxpipeline/AddPostFxPipelineInstance.js
var AddPostFxPipelineInstance = function(gameObject, PostFxPipelineClass, config) {
  if (config === void 0) {
    config = {};
  }
  gameObject.setPostPipeline(PostFxPipelineClass);
  var pipeline = gameObject.postPipelines[gameObject.postPipelines.length - 1];
  pipeline.resetFromJSON(config);
  if (config.name) {
    pipeline.name = config.name;
  }
  return pipeline;
};
var AddPostFxPipelineInstance_default = AddPostFxPipelineInstance;

// node_modules/phaser3-rex-plugins/plugins/utils/renderer/postfxpipeline/RemovePostFxPipelineInstance.js
var SpliceOne = Phaser.Utils.Array.SpliceOne;
var RemovePostFxPipelineInstance = function(gameObject, PostFxPipelineClass, name) {
  if (name === void 0) {
    var pipelines = gameObject.postPipelines;
    for (var i = pipelines.length - 1; i >= 0; i--) {
      var instance = pipelines[i];
      if (instance instanceof PostFxPipelineClass) {
        instance.destroy();
        SpliceOne(pipelines, i);
      }
    }
  } else {
    var pipelines = gameObject.postPipelines;
    for (var i = 0, cnt = pipelines.length; i < cnt; i++) {
      var instance = pipelines[i];
      if (instance instanceof PostFxPipelineClass && instance.name === name) {
        instance.destroy();
        SpliceOne(pipelines, i);
      }
    }
  }
  gameObject.hasPostPipeline = gameObject.postPipelines.length > 0;
};
var RemovePostFxPipelineInstance_default = RemovePostFxPipelineInstance;

// node_modules/phaser3-rex-plugins/plugins/utils/renderer/postfxpipeline/GetPostFxPipelineInstance.js
var GetPostFxPipelineInstance = function(gameObject, PostFxPipelineClass, name) {
  if (name === void 0) {
    var result = [];
    var pipelines = gameObject.postPipelines;
    for (var i = 0, cnt = pipelines.length; i < cnt; i++) {
      var instance = pipelines[i];
      if (instance instanceof PostFxPipelineClass) {
        result.push(instance);
      }
    }
    return result;
  } else {
    var pipelines = gameObject.postPipelines;
    for (var i = 0, cnt = pipelines.length; i < cnt; i++) {
      var instance = pipelines[i];
      if (instance instanceof PostFxPipelineClass && instance.name === name) {
        return instance;
      }
    }
  }
};
var GetPostFxPipelineInstance_default = GetPostFxPipelineInstance;

// node_modules/phaser3-rex-plugins/plugins/utils/renderer/postfxpipeline/BasePostFxPipelinePlugin.js
var BasePostFxPipelinePlugin = class extends Phaser.Plugins.BasePlugin {
  setPostPipelineClass(PostFxPipelineClass, postFxPipelineName) {
    this.PostFxPipelineClass = PostFxPipelineClass;
    this.postFxPipelineName = postFxPipelineName;
    return this;
  }
  start() {
    var eventEmitter = this.game.events;
    eventEmitter.once("destroy", this.destroy, this);
    RegisterPostPipeline_default(this.game, this.postFxPipelineName, this.PostFxPipelineClass);
  }
  add(gameObject, config) {
    return AddPostFxPipelineInstance_default(gameObject, this.PostFxPipelineClass, config);
  }
  remove(gameObject, name) {
    RemovePostFxPipelineInstance_default(gameObject, this.PostFxPipelineClass, name);
    return this;
  }
  get(gameObject, name) {
    return GetPostFxPipelineInstance_default(gameObject, this.PostFxPipelineClass, name);
  }
};
var BasePostFxPipelinePlugin_default = BasePostFxPipelinePlugin;

// node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js
var IsInValidKey = function(keys) {
  return keys == null || keys === "" || keys.length === 0;
};
var GetEntry = function(target, keys, defaultEntry) {
  var entry = target;
  if (IsInValidKey(keys)) {
  } else {
    if (typeof keys === "string") {
      keys = keys.split(".");
    }
    var key;
    for (var i = 0, cnt = keys.length; i < cnt; i++) {
      key = keys[i];
      if (entry[key] == null || typeof entry[key] !== "object") {
        var newEntry;
        if (i === cnt - 1) {
          if (defaultEntry === void 0) {
            newEntry = {};
          } else {
            newEntry = defaultEntry;
          }
        } else {
          newEntry = {};
        }
        entry[key] = newEntry;
      }
      entry = entry[key];
    }
  }
  return entry;
};
var SetValue = function(target, keys, value, delimiter) {
  if (delimiter === void 0) {
    delimiter = ".";
  }
  if (typeof target !== "object") {
    return;
  } else if (IsInValidKey(keys)) {
    if (value == null) {
      return;
    } else if (typeof value === "object") {
      target = value;
    }
  } else {
    if (typeof keys === "string") {
      keys = keys.split(delimiter);
    }
    var lastKey = keys.pop();
    var entry = GetEntry(target, keys);
    entry[lastKey] = value;
  }
  return target;
};
var SetValue_default = SetValue;

export {
  BasePostFxPipelinePlugin_default,
  SetValue_default
};
//# sourceMappingURL=chunk-QODSAB6O.js.map
