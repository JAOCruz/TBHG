import {
  BasePostFxPipelinePlugin_default,
  SetValue_default
} from "./chunk-QODSAB6O.js";
import "./chunk-76J2PTFD.js";

// node_modules/phaser3-rex-plugins/plugins/shaders/glowfilter2/glowfilter-frag.js
var frag = `#ifdef GL_FRAGMENT_PRECISION_HIGH
#define highmedp highp
#else
#define highmedp mediump
#endif
precision highmedp float;

// Scene buffer
uniform sampler2D uMainSampler; 
varying vec2 outTexCoord;

// Effect parameters
uniform vec2 texSize;
uniform float outerStrength;
uniform float innerStrength;
uniform vec4 glowColor; // (0, 0, 0);
uniform float knockout;

// const
const float PI = 3.14159265358979323846264;

const float DIST = __DIST__;
const float ANGLE_STEP_SIZE = min(__ANGLE_STEP_SIZE__, PI * 2.0);
const float ANGLE_STEP_NUM = ceil(PI * 2.0 / ANGLE_STEP_SIZE);

const float MAX_TOTAL_ALPHA = ANGLE_STEP_NUM * DIST * (DIST + 1.0) / 2.0;


void main(void) {
  vec2 px = vec2(1./texSize.x, 1./texSize.y);

  float totalAlpha = 0.0;

  vec2 direction;
  vec2 offset;
  vec4 curColor;

  for (float angle = 0.; angle < PI * 2.; angle += ANGLE_STEP_SIZE) {
     direction = vec2(cos(angle), sin(angle)) * px;

     for (float curDistance = 0.0; curDistance < DIST; curDistance++) {
         offset = direction * (curDistance + 1.0);
         curColor = texture2D(uMainSampler, outTexCoord + offset);
         totalAlpha += (DIST - curDistance) * curColor.a;
     }
  }
  
  curColor = texture2D(uMainSampler, outTexCoord);

  float alphaRatio = (totalAlpha / MAX_TOTAL_ALPHA);

  float innerGlowAlpha = (1.0 - alphaRatio) * innerStrength * curColor.a;
  float innerGlowStrength = min(1.0, innerGlowAlpha);
  
  vec4 innerColor = mix(curColor, glowColor, innerGlowStrength);

  float outerGlowAlpha = alphaRatio * outerStrength * (1. - curColor.a);
  float outerGlowStrength = min(1.0 - innerColor.a, outerGlowAlpha);

  vec4 outerGlowColor = outerGlowStrength * glowColor.rgba;
  
  if (knockout > 0.) {
    float resultAlpha = outerGlowAlpha + innerGlowAlpha;
    gl_FragColor = vec4(glowColor.rgb * resultAlpha, resultAlpha);
  }
  else {
    gl_FragColor = innerColor + outerGlowColor;
  }
}
`;
var GetValue = Phaser.Utils.Objects.GetValue;
var GetFrag = function(config) {
  var quality = GetValue(config, "quality", 0, 1);
  var distance = GetValue(config, "distance", 10);
  return frag.replace(/__ANGLE_STEP_SIZE__/gi, `${(1 / quality / distance).toFixed(7)}`).replace(/__DIST__/gi, `${Math.round(distance).toFixed(0)}.0`);
};
var glowfilter_frag_default = GetFrag;

// node_modules/phaser3-rex-plugins/plugins/shaders/glowfilter2/GlowFilterPostFxPipeline.js
var PostFXPipeline = Phaser.Renderer.WebGL.Pipelines.PostFXPipeline;
var GetValue2 = Phaser.Utils.Objects.GetValue;
var IntegerToRGB = Phaser.Display.Color.IntegerToRGB;
var Color = Phaser.Display.Color;
var Quality = 0.1;
var Distance = 10;
var FragSrc = glowfilter_frag_default({ quality: Quality, distance: Distance });
var GlowFilterPostFxPipeline = class extends PostFXPipeline {
  constructor(game) {
    super({
      name: "rexGlowFilterPostFx",
      game,
      renderTarget: true,
      fragShader: FragSrc
    });
    this.outerStrength = 0;
    this.innerStrength = 0;
    this._glowColor = new Color();
    this.knockout = false;
  }
  resetFromJSON(o) {
    this.setOuterStrength(GetValue2(o, "outerStrength", 4));
    this.setInnerStrength(GetValue2(o, "innerStrength", 0));
    this.setGlowColor(GetValue2(o, "glowColor", 16777215));
    this.setKnockout(GetValue2(o, "knockout", false));
    return this;
  }
  onPreRender() {
    this.set1f("outerStrength", this.outerStrength);
    this.set1f("innerStrength", this.innerStrength);
    var color = this._glowColor;
    this.set4f("glowColor", color.redGL, color.greenGL, color.blueGL, color.alphaGL);
    this.set1f("knockout", this.knockout ? 1 : 0);
    this.set2f("texSize", this.renderer.width, this.renderer.height);
  }
  // outerStrength
  setOuterStrength(value) {
    this.outerStrength = value;
    return this;
  }
  // innerStrength
  setInnerStrength(value) {
    this.innerStrength = value;
    return this;
  }
  // glowColor
  get glowColor() {
    return this._glowColor;
  }
  set glowColor(value) {
    if (typeof value === "number") {
      value = IntegerToRGB(value);
    }
    this._glowColor.setFromRGB(value);
  }
  setGlowColor(value) {
    this.glowColor = value;
    return this;
  }
  // knockout
  setKnockout(value) {
    this.knockout = value;
    return this;
  }
  static setQuality(value) {
    if (Quality === value) {
      return;
    }
    Quality = value;
    FragSrc = glowfilter_frag_default({ quality: Quality, distance: Distance });
  }
  static getQuality() {
    return Quality;
  }
  static setDistance(value) {
    if (Distance === value) {
      return;
    }
    Distance = value;
    FragSrc = glowfilter_frag_default({ quality: Quality, distance: Distance });
  }
  static getDistance() {
    return Distance;
  }
};
var GlowFilterPostFxPipeline_default = GlowFilterPostFxPipeline;

// node_modules/phaser3-rex-plugins/plugins/glowfilter2pipeline.js
var glowfilter2pipeline_default = GlowFilterPostFxPipeline_default;

// node_modules/phaser3-rex-plugins/plugins/glowfilter2pipeline-plugin.js
var GetValue3 = Phaser.Utils.Objects.GetValue;
var GlowFilterPipelinePlugin = class extends BasePostFxPipelinePlugin_default {
  constructor(pluginManager) {
    super(pluginManager);
    this.setPostPipelineClass(glowfilter2pipeline_default, "rexGlowFilter2PostFx");
  }
  add(gameObject, config) {
    this.setQuality(GetValue3(config, "quality", this.quality));
    this.setDistance(GetValue3(config, "distance", this.distance));
    return super.add(gameObject, config);
  }
  setQuality(value) {
    glowfilter2pipeline_default.setQuality(value);
    return this;
  }
  set quality(value) {
    this.setQuality(value);
  }
  get quality() {
    return glowfilter2pipeline_default.getQuality();
  }
  setDistance(value) {
    glowfilter2pipeline_default.setDistance(value);
    return this;
  }
  set distance(value) {
    this.setDistance(value);
  }
  get distance() {
    return glowfilter2pipeline_default.getDistance();
  }
};
SetValue_default(window, "RexPlugins.Pipelines.GlowFilter2PostFx", glowfilter2pipeline_default);
var glowfilter2pipeline_plugin_default = GlowFilterPipelinePlugin;
export {
  glowfilter2pipeline_plugin_default as default
};
//# sourceMappingURL=phaser3-rex-plugins_plugins_glowfilter2pipeline-plugin__js.js.map
