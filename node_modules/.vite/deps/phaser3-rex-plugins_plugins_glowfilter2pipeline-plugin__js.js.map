{
  "version": 3,
  "sources": ["../../phaser3-rex-plugins/plugins/shaders/glowfilter2/glowfilter-frag.js", "../../phaser3-rex-plugins/plugins/shaders/glowfilter2/GlowFilterPostFxPipeline.js", "../../phaser3-rex-plugins/plugins/glowfilter2pipeline.js", "../../phaser3-rex-plugins/plugins/glowfilter2pipeline-plugin.js"],
  "sourcesContent": ["// Reference: https://github.com/pixijs/filters/blob/main/filters/glow/src/glow.frag\r\n\r\nconst frag = `\\\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n#define highmedp highp\r\n#else\r\n#define highmedp mediump\r\n#endif\r\nprecision highmedp float;\r\n\r\n// Scene buffer\r\nuniform sampler2D uMainSampler; \r\nvarying vec2 outTexCoord;\r\n\r\n// Effect parameters\r\nuniform vec2 texSize;\r\nuniform float outerStrength;\r\nuniform float innerStrength;\r\nuniform vec4 glowColor; // (0, 0, 0);\r\nuniform float knockout;\r\n\r\n// const\r\nconst float PI = 3.14159265358979323846264;\r\n\r\nconst float DIST = __DIST__;\r\nconst float ANGLE_STEP_SIZE = min(__ANGLE_STEP_SIZE__, PI * 2.0);\r\nconst float ANGLE_STEP_NUM = ceil(PI * 2.0 / ANGLE_STEP_SIZE);\r\n\r\nconst float MAX_TOTAL_ALPHA = ANGLE_STEP_NUM * DIST * (DIST + 1.0) / 2.0;\r\n\r\n\r\nvoid main(void) {\r\n  vec2 px = vec2(1./texSize.x, 1./texSize.y);\r\n\r\n  float totalAlpha = 0.0;\r\n\r\n  vec2 direction;\r\n  vec2 offset;\r\n  vec4 curColor;\r\n\r\n  for (float angle = 0.; angle < PI * 2.; angle += ANGLE_STEP_SIZE) {\r\n     direction = vec2(cos(angle), sin(angle)) * px;\r\n\r\n     for (float curDistance = 0.0; curDistance < DIST; curDistance++) {\r\n         offset = direction * (curDistance + 1.0);\r\n         curColor = texture2D(uMainSampler, outTexCoord + offset);\r\n         totalAlpha += (DIST - curDistance) * curColor.a;\r\n     }\r\n  }\r\n  \r\n  curColor = texture2D(uMainSampler, outTexCoord);\r\n\r\n  float alphaRatio = (totalAlpha / MAX_TOTAL_ALPHA);\r\n\r\n  float innerGlowAlpha = (1.0 - alphaRatio) * innerStrength * curColor.a;\r\n  float innerGlowStrength = min(1.0, innerGlowAlpha);\r\n  \r\n  vec4 innerColor = mix(curColor, glowColor, innerGlowStrength);\r\n\r\n  float outerGlowAlpha = alphaRatio * outerStrength * (1. - curColor.a);\r\n  float outerGlowStrength = min(1.0 - innerColor.a, outerGlowAlpha);\r\n\r\n  vec4 outerGlowColor = outerGlowStrength * glowColor.rgba;\r\n  \r\n  if (knockout > 0.) {\r\n    float resultAlpha = outerGlowAlpha + innerGlowAlpha;\r\n    gl_FragColor = vec4(glowColor.rgb * resultAlpha, resultAlpha);\r\n  }\r\n  else {\r\n    gl_FragColor = innerColor + outerGlowColor;\r\n  }\r\n}\r\n`;\r\n\r\nconst GetValue = Phaser.Utils.Objects.GetValue;\r\nvar GetFrag = function (config) {\r\n    var quality = GetValue(config, 'quality', 0, 1);\r\n    var distance = GetValue(config, 'distance', 10);\r\n    return frag\r\n        .replace(/__ANGLE_STEP_SIZE__/gi, `${(1 / quality / distance).toFixed(7)}`)\r\n        .replace(/__DIST__/gi, `${Math.round(distance).toFixed(0)}.0`);\r\n}\r\n\r\n\r\nexport default GetFrag;", "import GetFrag from './glowfilter-frag';\r\n\r\nconst PostFXPipeline = Phaser.Renderer.WebGL.Pipelines.PostFXPipeline;\r\nconst GetValue = Phaser.Utils.Objects.GetValue;\r\nconst IntegerToRGB = Phaser.Display.Color.IntegerToRGB;\r\nconst Color = Phaser.Display.Color;\r\n\r\nvar Quality = 0.1;\r\nvar Distance = 10;\r\nvar FragSrc = GetFrag({ quality: Quality, distance: Distance });\r\nclass GlowFilterPostFxPipeline extends PostFXPipeline {\r\n    constructor(game) {\r\n        super({\r\n            name: 'rexGlowFilterPostFx',\r\n            game: game,\r\n            renderTarget: true,\r\n            fragShader: FragSrc\r\n        });\r\n\r\n        this.outerStrength = 0;\r\n        this.innerStrength = 0;\r\n        this._glowColor = new Color();\r\n        this.knockout = false;\r\n    }\r\n\r\n    resetFromJSON(o) {\r\n        this.setOuterStrength(GetValue(o, 'outerStrength', 4));\r\n        this.setInnerStrength(GetValue(o, 'innerStrength', 0));\r\n        this.setGlowColor(GetValue(o, 'glowColor', 0xffffff));\r\n        this.setKnockout(GetValue(o, 'knockout', false));\r\n        return this;\r\n    }\r\n\r\n    onPreRender() {\r\n        this.set1f('outerStrength', this.outerStrength);\r\n        this.set1f('innerStrength', this.innerStrength);\r\n\r\n        var color = this._glowColor;\r\n        this.set4f('glowColor', color.redGL, color.greenGL, color.blueGL, color.alphaGL);\r\n\r\n        this.set1f('knockout', (this.knockout) ? 1 : 0);\r\n\r\n        this.set2f('texSize', this.renderer.width, this.renderer.height);\r\n    }\r\n\r\n    // outerStrength\r\n    setOuterStrength(value) {\r\n        this.outerStrength = value;\r\n        return this;\r\n    }\r\n\r\n    // innerStrength\r\n    setInnerStrength(value) {\r\n        this.innerStrength = value;\r\n        return this;\r\n    }\r\n\r\n    // glowColor\r\n    get glowColor() {\r\n        return this._glowColor;\r\n    }\r\n\r\n    set glowColor(value) {\r\n        if (typeof (value) === 'number') {\r\n            value = IntegerToRGB(value);\r\n        }\r\n        this._glowColor.setFromRGB(value);\r\n    }\r\n\r\n    setGlowColor(value) {\r\n        this.glowColor = value;\r\n        return this;\r\n    }\r\n\r\n    // knockout\r\n    setKnockout(value) {\r\n        this.knockout = value;\r\n        return this;\r\n    }\r\n\r\n    static setQuality(value) {\r\n        if (Quality === value) {\r\n            return;\r\n        }\r\n        Quality = value;\r\n        FragSrc = GetFrag({ quality: Quality, distance: Distance });\r\n    }\r\n\r\n    static getQuality() {\r\n        return Quality;\r\n    }\r\n\r\n    static setDistance(value) {\r\n        if (Distance === value) {\r\n            return;\r\n        }\r\n        Distance = value;\r\n        FragSrc = GetFrag({ quality: Quality, distance: Distance });\r\n    }\r\n\r\n    static getDistance() {\r\n        return Distance;\r\n    }\r\n\r\n}\r\n\r\nexport default GlowFilterPostFxPipeline;", "import GlowFilterPostFxPipeline from './shaders/glowfilter2/GlowFilterPostFxPipeline.js';\r\nexport default GlowFilterPostFxPipeline;", "import GlowFilterPostFxPipeline from './glowfilter2pipeline.js';\r\nimport BasePostFxPipelinePlugin from './utils/renderer/postfxpipeline/BasePostFxPipelinePlugin.js';\r\nimport SetValue from './utils/object/SetValue.js';\r\n\r\nconst GetValue = Phaser.Utils.Objects.GetValue;\r\n\r\nclass GlowFilterPipelinePlugin extends BasePostFxPipelinePlugin {\r\n    constructor(pluginManager) {\r\n        super(pluginManager);\r\n        this.setPostPipelineClass(GlowFilterPostFxPipeline, 'rexGlowFilter2PostFx');\r\n    }\r\n\r\n    add(gameObject, config) {\r\n        this.setQuality(GetValue(config, 'quality', this.quality));\r\n        this.setDistance(GetValue(config, 'distance', this.distance));\r\n        return super.add(gameObject, config);\r\n    }\r\n\r\n    setQuality(value) {\r\n        GlowFilterPostFxPipeline.setQuality(value);\r\n        return this;\r\n    }\r\n\r\n    set quality(value) {\r\n        this.setQuality(value);\r\n    }\r\n\r\n    get quality() {\r\n        return GlowFilterPostFxPipeline.getQuality();\r\n    }\r\n\r\n    setDistance(value) {\r\n        GlowFilterPostFxPipeline.setDistance(value);\r\n        return this;\r\n    }\r\n\r\n    set distance(value) {\r\n        this.setDistance(value);\r\n    }\r\n\r\n    get distance() {\r\n        return GlowFilterPostFxPipeline.getDistance();\r\n    }\r\n}\r\n\r\nSetValue(window, 'RexPlugins.Pipelines.GlowFilter2PostFx', GlowFilterPostFxPipeline);\r\n\r\nexport default GlowFilterPipelinePlugin;"],
  "mappings": "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",
  "names": ["GetValue", "GetValue"]
}
