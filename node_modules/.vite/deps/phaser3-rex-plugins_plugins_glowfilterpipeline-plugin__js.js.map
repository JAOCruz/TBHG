{
  "version": 3,
  "sources": ["../../phaser3-rex-plugins/plugins/shaders/glowfilter/glowfilter-frag.js", "../../phaser3-rex-plugins/plugins/shaders/glowfilter/GlowFilterPostFxPipeline.js", "../../phaser3-rex-plugins/plugins/glowfilterpipeline.js", "../../phaser3-rex-plugins/plugins/glowfilterpipeline-plugin.js"],
  "sourcesContent": ["// https://gist.github.com/MatthewBarker/032c325ef8577c6d0188\r\n\r\nconst frag = `\\\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n#define highmedp highp\r\n#else\r\n#define highmedp mediump\r\n#endif\r\nprecision highmedp float;\r\n\r\n// Scene buffer\r\nuniform sampler2D uMainSampler; \r\nvarying vec2 outTexCoord;\r\n\r\n// Effect parameters\r\nuniform float intensity;\r\n\r\nvoid main() {\r\n  vec4 front = texture2D(uMainSampler, outTexCoord);\r\n  vec4 sum = vec4(0);\r\n  for(int xx = -4; xx <= 4; xx++) {\r\n    for(int yy = -3; yy <= 3; yy++) {\r\n      float dist = sqrt(float(xx*xx) + float(yy*yy));\r\n      float factor = 0.0;\r\n      if (dist == 0.0) {\r\n        factor = 2.0;\r\n      } else {\r\n        factor = 2.0/abs(float(dist));\r\n      }\r\n      sum += texture2D(uMainSampler, outTexCoord + vec2(xx, yy) * 0.002) * factor;\r\n    }\r\n  }\r\n  \r\n  gl_FragColor = mix(front, sum, intensity);\r\n}\r\n`;\r\n\r\nexport default frag;", "import FragSrc from './glowfilter-frag';\r\n\r\nconst PostFXPipeline = Phaser.Renderer.WebGL.Pipelines.PostFXPipeline;\r\nconst GetValue = Phaser.Utils.Objects.GetValue;\r\n\r\nclass GlowFilterPostFxPipeline extends PostFXPipeline {\r\n    constructor(game) {\r\n        super({\r\n            name: 'rexGlowFilterPostFx',\r\n            game: game,\r\n            renderTarget: true,\r\n            fragShader: FragSrc\r\n        });\r\n\r\n        this.intensity = 0;\r\n    }\r\n\r\n    resetFromJSON(o) {\r\n        this.setIntensity(GetValue(o, 'intensity', 0));\r\n        return this;\r\n    }\r\n\r\n    onPreRender() {\r\n        this.set1f('intensity', this.intensity);\r\n    }\r\n\r\n    // intensity\r\n    setIntensity(value) {\r\n        this.intensity = value;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default GlowFilterPostFxPipeline;", "import GlowFilterPostFxPipeline from './shaders/glowfilter/GlowFilterPostFxPipeline.js';\r\nexport default GlowFilterPostFxPipeline;", "import GlowFilterPostFxPipeline from './glowfilterpipeline.js';\r\nimport BasePostFxPipelinePlugin from './utils/renderer/postfxpipeline/BasePostFxPipelinePlugin.js';\r\nimport SetValue from './utils/object/SetValue.js';\r\n\r\nclass GlowFilterPipelinePlugin extends BasePostFxPipelinePlugin {\r\n    constructor(pluginManager) {\r\n        super(pluginManager);\r\n        this.setPostPipelineClass(GlowFilterPostFxPipeline, 'rexGlowFilterPostFx');\r\n    }\r\n}\r\n\r\nSetValue(window, 'RexPlugins.Pipelines.GlowFilterPostFx', GlowFilterPostFxPipeline);\r\n\r\nexport default GlowFilterPipelinePlugin;"],
  "mappings": ";;;;;;;AAEA,IAAM,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCb,IAAO,0BAAQ;;;ACnCf,IAAM,iBAAiB,OAAO,SAAS,MAAM,UAAU;AACvD,IAAM,WAAW,OAAO,MAAM,QAAQ;AAEtC,IAAM,2BAAN,cAAuC,eAAe;AAAA,EAClD,YAAY,MAAM;AACd,UAAM;AAAA,MACF,MAAM;AAAA,MACN;AAAA,MACA,cAAc;AAAA,MACd,YAAY;AAAA,IAChB,CAAC;AAED,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,cAAc,GAAG;AACb,SAAK,aAAa,SAAS,GAAG,aAAa,CAAC,CAAC;AAC7C,WAAO;AAAA,EACX;AAAA,EAEA,cAAc;AACV,SAAK,MAAM,aAAa,KAAK,SAAS;AAAA,EAC1C;AAAA;AAAA,EAGA,aAAa,OAAO;AAChB,SAAK,YAAY;AACjB,WAAO;AAAA,EACX;AACJ;AAEA,IAAO,mCAAQ;;;AChCf,IAAO,6BAAQ;;;ACGf,IAAM,2BAAN,cAAuC,iCAAyB;AAAA,EAC5D,YAAY,eAAe;AACvB,UAAM,aAAa;AACnB,SAAK,qBAAqB,4BAA0B,qBAAqB;AAAA,EAC7E;AACJ;AAEA,iBAAS,QAAQ,yCAAyC,0BAAwB;AAElF,IAAO,oCAAQ;",
  "names": []
}
