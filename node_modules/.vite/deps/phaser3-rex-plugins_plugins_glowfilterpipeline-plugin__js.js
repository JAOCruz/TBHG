import {
  BasePostFxPipelinePlugin_default,
  SetValue_default
} from "./chunk-QODSAB6O.js";
import "./chunk-76J2PTFD.js";

// node_modules/phaser3-rex-plugins/plugins/shaders/glowfilter/glowfilter-frag.js
var frag = `#ifdef GL_FRAGMENT_PRECISION_HIGH
#define highmedp highp
#else
#define highmedp mediump
#endif
precision highmedp float;

// Scene buffer
uniform sampler2D uMainSampler; 
varying vec2 outTexCoord;

// Effect parameters
uniform float intensity;

void main() {
  vec4 front = texture2D(uMainSampler, outTexCoord);
  vec4 sum = vec4(0);
  for(int xx = -4; xx <= 4; xx++) {
    for(int yy = -3; yy <= 3; yy++) {
      float dist = sqrt(float(xx*xx) + float(yy*yy));
      float factor = 0.0;
      if (dist == 0.0) {
        factor = 2.0;
      } else {
        factor = 2.0/abs(float(dist));
      }
      sum += texture2D(uMainSampler, outTexCoord + vec2(xx, yy) * 0.002) * factor;
    }
  }
  
  gl_FragColor = mix(front, sum, intensity);
}
`;
var glowfilter_frag_default = frag;

// node_modules/phaser3-rex-plugins/plugins/shaders/glowfilter/GlowFilterPostFxPipeline.js
var PostFXPipeline = Phaser.Renderer.WebGL.Pipelines.PostFXPipeline;
var GetValue = Phaser.Utils.Objects.GetValue;
var GlowFilterPostFxPipeline = class extends PostFXPipeline {
  constructor(game) {
    super({
      name: "rexGlowFilterPostFx",
      game,
      renderTarget: true,
      fragShader: glowfilter_frag_default
    });
    this.intensity = 0;
  }
  resetFromJSON(o) {
    this.setIntensity(GetValue(o, "intensity", 0));
    return this;
  }
  onPreRender() {
    this.set1f("intensity", this.intensity);
  }
  // intensity
  setIntensity(value) {
    this.intensity = value;
    return this;
  }
};
var GlowFilterPostFxPipeline_default = GlowFilterPostFxPipeline;

// node_modules/phaser3-rex-plugins/plugins/glowfilterpipeline.js
var glowfilterpipeline_default = GlowFilterPostFxPipeline_default;

// node_modules/phaser3-rex-plugins/plugins/glowfilterpipeline-plugin.js
var GlowFilterPipelinePlugin = class extends BasePostFxPipelinePlugin_default {
  constructor(pluginManager) {
    super(pluginManager);
    this.setPostPipelineClass(glowfilterpipeline_default, "rexGlowFilterPostFx");
  }
};
SetValue_default(window, "RexPlugins.Pipelines.GlowFilterPostFx", glowfilterpipeline_default);
var glowfilterpipeline_plugin_default = GlowFilterPipelinePlugin;
export {
  glowfilterpipeline_plugin_default as default
};
//# sourceMappingURL=phaser3-rex-plugins_plugins_glowfilterpipeline-plugin__js.js.map
